// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var LabJson = require("./lab.json");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");

function props() {
  return {
          src: (function (param) {
              return Json_decode.field("src", (function (param) {
                            return Json_decode.optional(Json_decode.string, param);
                          }), param);
            }),
          w: (function (param) {
              return Json_decode.field("w", Json_decode.$$float, param);
            })
        };
}

function layout() {
  return {
          i: (function (param) {
              return Json_decode.field("i", Json_decode.string, param);
            }),
          name: (function (param) {
              return Json_decode.field("name", Json_decode.string, param);
            }),
          w: (function (param) {
              return Json_decode.field("w", Json_decode.$$int, param);
            }),
          h: (function (param) {
              return Json_decode.field("h", Json_decode.$$int, param);
            }),
          x: (function (param) {
              return Json_decode.field("x", Json_decode.$$int, param);
            }),
          y: (function (param) {
              return Json_decode.field("y", Json_decode.$$int, param);
            }),
          moved: (function (param) {
              return Json_decode.field("y", (function (param) {
                            return Json_decode.optional(Json_decode.bool, param);
                          }), param);
            }),
          static: (function (param) {
              return Json_decode.field("y", (function (param) {
                            return Json_decode.nullable(Json_decode.bool, param);
                          }), param);
            })
        };
}

function style() {
  return {
          display: (function (param) {
              return Json_decode.field("display", Json_decode.string, param);
            }),
          maxWidth: (function (param) {
              return Json_decode.field("maxWidth", Json_decode.string, param);
            })
        };
}

function component() {
  return {
          name: (function (param) {
              return Json_decode.field("name", Json_decode.string, param);
            }),
          type: (function (param) {
              return Json_decode.field("type", Json_decode.string, param);
            }),
          props: (function (param) {
              return Json_decode.field("props", props, param);
            }),
          style: (function (param) {
              return Json_decode.field("style", style, param);
            }),
          examples: (function (param) {
              return Json_decode.field("examples", (function (param) {
                            return Json_decode.array(Json_decode.string, param);
                          }), param);
            })
        };
}

function lab() {
  return {
          name: (function (param) {
              return Json_decode.field("name", Json_decode.string, param);
            }),
          library: (function (param) {
              return Json_decode.field("library", Json_decode.string, param);
            }),
          layout: (function (param) {
              return Json_decode.field("layout", (function (param) {
                            return Json_decode.array(layout, param);
                          }), param);
            }),
          components: (function (param) {
              return Json_decode.field("components", (function (param) {
                            return Json_decode.array(component, param);
                          }), param);
            })
        };
}

var Decode = /* module */[
  /* props */props,
  /* layout */layout,
  /* style */style,
  /* component */component,
  /* lab */lab
];

var lab$1 = lab(LabJson);

console.log(lab$1);

console.log(lab$1.components);

exports.Decode = Decode;
exports.lab = lab$1;
/* lab Not a pure module */
